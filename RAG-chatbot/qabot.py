from ibm_watsonx_ai.foundation_models import ModelInference
from ibm_watsonx_ai.metanames import GenTextParamsMetaNames as GenParams
from ibm_watsonx_ai.metanames import EmbedTextParamsMetaNames
from ibm_watsonx_ai import Credentials
from langchain_ibm import WatsonxLLM, WatsonxEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain_community.document_loaders import PyPDFLoader
from langchain.chains import RetrievalQA

import gradio as gr

# You can use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')

def get_llm():
    """Loads the LLM to be used."""
    model_id = 'mistralai/mixtral-8x7b-instruct-v01'
    parameters = {
        GenParams.MAX_NEW_TOKENS: 256,
        GenParams.TEMPERATURE: 0.5,
    }
    project_id = "skills-network"
    watsonx_llm = WatsonxLLM(
        model_id=model_id,
        url="https://us-south.ml.cloud.ibm.com",
        project_id=project_id,
        params=parameters,
    )
    return watsonx_llm

def document_loader(file):
    """Loads the document from a PDF file."""
    loader = PyPDFLoader(file.name)
    loaded_document = loader.load()
    return loaded_document

def text_splitter(data):
    """Splits text into chunks."""
    splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,
        chunk_overlap=50,
        length_function=len,
    )
    chunks = splitter.split_documents(data)
    return chunks

def vector_database(chunks):
    """Embeds and stores text chunks as vectors."""
    embedding_model = watsonx_embedding()
    vector_db = Chroma.from_documents(chunks, embedding_model)
    return vector_db

def watsonx_embedding():
    """Initializes the embedding model"""
    embed_params = {
        EmbedTextParamsMetaNames.TRUNCATE_INPUT_TOKENS: 3,
        EmbedTextParamsMetaNames.RETURN_OPTIONS: {"input_text": True},
    }
    embedding = WatsonxEmbeddings(
        model_id="ibm/slate-125m-english-rtrvr",
        url="https://us-south.ml.cloud.ibm.com",
        project_id="skills-network",
        params=embed_params,
    )
    return embedding

def retriever(file):
    """Define the retriever."""
    splits = document_loader(file)
    chunks = text_splitter(splits)
    vector_db = vector_database(chunks)
    retriever = vector_db.as_retriever()
    return retriever

def retriever_qa(file, query):
    """Define the question-answer chain.

    Use `RetrievalQA` from `langchain` in order to process a query with the
    defined LLM using retrieval-augmented generation (RAG).
    """
    llm = get_llm()
    qa = RetrievalQA.from_chain_type(
        llm=llm,
        chain_type="stuff",
        retriever=retriever(file),
        return_source_documents=False,
    )
    response = qa.invoke(query)
    return response["result"]

# Create a QA bot interface with Gradio:
rag_application = gr.Interface(
    fn=retriever_qa,
    allow_flagging="never", # don't show button to flag
    inputs=[
        gr.File(
            label="Upload PDF file",
            file_count="single",
            file_types=[".pdf"],
            type="filepath",
        ),
        gr.Textbox(
            label="Input query",
            lines=2,
            placeholder="Type your questuon here...",
        ),
    ],
    outputs=gr.Textbox(label="Output"),
    title="RAG Chatbot",
    description="Upload a PDF document and ask any question. The chatbot will\
                 try to answer using the provided document."
)

# Launch the Gradio interface when running this script:
rag_application.launch(server_name="0.0.0.0", server_port=7860)